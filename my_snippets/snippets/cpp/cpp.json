{
	"GOTOHANOI": {
		"prefix": "hvmegy",
		"body": [
			"// [ нvмegy ]",
			"// OLPSIEUCUP AND ICPC 2024 GOTOHANOI",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using i64 = long long;",
			"#define int long long",
			" ",
			"#define all(c) c.begin(), c.end()",
			"#ifdef hvmegy",
			"#define dbg(...) logger(#__VA_ARGS__, __VA_ARGS__)",
			"template<typename ...Args>",
			"void logger(string vars, Args&&... values) {",
				"	cerr << \"[\" << vars << \" : \";",
					"	string delim = \"\";",
					"	(..., (cerr << delim << values, delim = \", \"));",
					"	cerr << \"]\" << '\\n'; ",
					"}",
					"#else",
					"#define dbg(...)",
					"#endif",
					" ",
					"mt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());",
					" ",
					"int GOTOHANOI();",
					"void init(); ",
					" ",
					"int32_t main()",
					"{",
						"        cin.tie(0) -> sync_with_stdio(0); ",
						"        cout << fixed << setprecision(15);",
						"	",
						"	#ifdef hvmegy",
						"	freopen(\"input.txt\", \"r\", stdin); ",
						"	freopen(\"output.txt\", \"w\", stdout); ",
						"	freopen(\"log.txt\", \"w\", stderr);",
						"	#endif",
						"",
						"",
						"",
						"	// =============================",
						"        	bool MULTITEST = ${1:0}; ",
						"	// =============================",
						"	",
						"	init(); ",
						"        int OLPSIEUCUP2024 = 1; ",
						"        if (MULTITEST) cin >> OLPSIEUCUP2024; ",
						"	for (int i = 1; i <= OLPSIEUCUP2024; i++) {",
							"		if (GOTOHANOI()) break;",
							"		#ifdef hvmegy",
							"			cout << \"--ENDTEST--\" << '\\n';",
							"			cerr << \"--ENDTEST--\" << '\\n';",
							"		#endif",
							"	}",
							"",
							"	#ifdef hvmegy",
							"		cerr << '\\n' << clock() * 1000.0 / CLOCKS_PER_SEC << \"ms\" << '\\n';",
							"	#endif",
							"",
							"        return 0;",
							"}",
							"",
							"void init() {}",
							"",
							"int GOTOHANOI() { ",
								"	${0}",
								"	",
								"	return 0; ",
								"}",
								"  "
		],
		"description": "GOTOHANOI"
	}, 
	"2-SAT Solver": {
		"prefix": "TSS",
		"body": [
			"struct TSS { ",
				"	int nvar; ",
				"	int nvrt; ",
				"	vector<vector<int>> adj;",
				"	vector<int> res, scc, topo, vis, in, low, del, idx; ",
				"",
				"	TSS(int nvar):",
				"		nvar(nvar), ",
				"		nvrt(nvar * 2), ",
				"		adj(nvrt + 1), ",
				"		res(nvar + 1), ",
				"		scc(nvrt + 1), ",
				"		in(nvrt + 1), ",
				"		low(nvrt + 1), ",
				"		del(nvrt + 1), ",
				"		idx(nvrt + 1) {}",
				"",
				"",
				"	int conj(int u) { ",
					"		if (u > nvar) return u - nvar; ",
					"		return u + nvar;",
					"	}",
					"",
					"	void add(int u, bool nu, int v, bool nv) { ",
						"		if (nu) u = conj(u); ",
						"		if (nv) v = conj(v); ",
						"		adj[conj(u)].push_back(v); ",
						"		adj[conj(v)].push_back(u); ",
						"	}",
						"	void edge(int u, bool nu, int v, bool nv) { ",
							"		if (nu) u = conj(u); ",
							"		if (nv) v = conj(v); ",
							"		adj[u].push_back(v); ",
							"	}",
							"	int curdfs = 0; ",
							"	stack<int> st; ",
							"	int curidx = nvrt; ",
							"	void tarjan(int u) { ",
								"		in[u] = low[u] = ++curdfs; ",
								"		st.push(u); ",
								"		for (int v : adj[u]) { ",
									"			if (del[v]) continue; ",
									"			if (!in[v]) { ",
										"				tarjan(v); ",
										"				low[u] = min(low[u], low[v]); ",
										"			}",
										"			else { ",
											"				low[u] = min(low[u], in[v]); ",
											"			}",
											"		}",
											"		if (low[u] == in[u]) { ",
												"			idx[u] = curidx--; ; ",
												"			while (st.top() != u) { ",
													"				int v = st.top(); ",
													"				st.pop(); ",
													"				del[v] = true; ",
													"				scc[v] = u; ",
													"			}",
													"			scc[u] = u; ",
													"			del[u] = true; ",
													"			st.pop(); ",
													"		}",
													"	}",
													"	bool solve() { ",
														"		for (int i = 1; i <= nvrt; i++) { ",
															"			if (!in[i]) tarjan(i); ",
															"		}",
															"		for (int i = 1; i <= nvar; i++) { ",
																"			if (scc[i] == scc[conj(i)]) return false; ",
																"			res[i] = idx[scc[i]] > idx[scc[conj(i)]]; ",
																"		}",
																"		return true; ",
																"	}",
																"};",
																""
		],
		"description": "2-SAT Solver"
	},
	"Treap": {
		"prefix": "Treap",
		"body": [
			"struct Treap { ",
				"        Treap *lef, *rig; ",
				"	Treap *par; ",
				"        int prio; ",
				"        int sz; ",
				"	int num;",
				"	int rev; ",
				"        Treap(int num): ",
				"		prio(rnd()), ",
				"		sz(1),  ",
				"		num(num), ",
				"		rev(0),",
				"		lef(nullptr), ",
				"		rig(nullptr) {}",
				"",
				"	void reverse() { ",
					"		rev ^= 1; ",
					"		swap(lef, rig); ",
					"	}",
					"}; ",
					" ",
					"int getsz(Treap *p) { ",
						"        return p ? p->sz : 0LL; ",
						"}",
						"",
						"int getnum(Treap *p) { ",
							"	return p ? p->num : 0LL; ",
							"}",
							" ",
							"void pull(Treap *p) { ",
								"        if (!p) return; ",
								"        p->sz = 1 + getsz(p->lef) + getsz(p->rig); ",
								"	if (p->lef) p->lef->par = p; ",
								"	if (p->rig) p->rig->par = p;",
								"}",
								"",
								" ",
								"void splitbynum(Treap *p, Treap *&lef, Treap *&rig, int k) { ",
									"        if (p == nullptr) {",
										"                lef = rig = nullptr; ",
										"                return; ",
										"        }",
										"        if (getnum(p) < k) { ",
											"                splitbynum(p->rig, p->rig, rig, k); ",
											"                lef = p; ",
											"        }",
											"        else { ",
												"                splitbynum(p->lef, lef, p->lef, k); ",
												"                rig = p; ",
												"        }",
												"        pull(p); ",
												"}",
												"",
												"void splitbysz(Treap *p, Treap *&lef, Treap *&rig, int k) { ",
													"	if (p == nullptr) { ",
														"		lef = rig = nullptr; ",
														"		return; ",
														"	}",
														"	if (getsz(p->lef) < k) { ",
															"		splitbysz(p->rig, p->rig, rig, k - getsz(p->lef) - 1); ",
															"		lef = p; ",
															"	}",
															"	else { ",
																"		splitbysz(p->lef, lef, p->lef, k); ",
																"		rig = p; ",
																"	}",
																"	pull(lef); ",
																"	pull(rig); ",
																"}",
																" ",
																"void merge(Treap *&p, Treap *lef, Treap *rig) { ",
																	"        if (!lef || !rig) { ",
																		"                p = (lef ? lef : rig); ",
																		"                return; ",
																		"        }",
																		"        if (lef->prio > rig->prio) { ",
																			"                merge(lef->rig, lef->rig, rig); ",
																			"                p = lef; ",
																			"        }",
																			"        else { ",
																				"                merge(rig->lef, lef, rig->lef); ",
																				"                p = rig; ",
																				"        }",
																				"        pull(p); ",
																				"}",
																				"",
																				"",
																				"",
																				""
		],
		"description": "Treap"
	}, 
	"Centroid Decomposition": {
		"prefix": "CD",
		"body": [
			"struct CD { ",
				"	vector<vector<pair<int, int>>> adj; ",
				"	vector<bool> del;",
				"	vector<int> sz; ",
				"	int treesize = 0; ",
				"	CD() {} ",
				"	CD(int n) { ",
					"		adj.resize(n + 1);  ",
					"		del.resize(n + 1); ",
					"		sz = vector<int>(n + 1); ",
					"	}",
					"	void add(int u, int v, int w) { ",
						"		adj[u].push_back({v, w}); ",
						"		adj[v].push_back({u, w}); ",
						"	}",
						"	int dfssz(int u, int p) { ",
							"		sz[u] = 1; ",
							"		for (auto [v, w] : adj[u]) { ",
								"			if (v == p) continue; ",
								"			if (del[v]) continue; ",
								"			sz[u] += dfssz(v, u); ",
								"		}",
								"		return sz[u]; ",
								"	}",
								"	int getct(int u, int p) { ",
									"		for (auto [v, w] : adj[u]) { ",
										"			if (v == p) continue; ",
										"			if (del[v]) continue; ",
										"			if (sz[v] * 2 > treesize) return getct(v, u); ",
										"		}",
										"		return u; ",
										"	}",
										"};",
										""
		],
		"description": "Centroid Decomposition"
	}, 
	"maxflow": {
		"prefix": "flow",
		"body": [
			"// https://pastebin.com/exQM152L",
			"",
			"template <typename T>",
			"class flow_graph {",
				" public:",
				"  static constexpr T eps = (T) 1e-9;",
				"",
				"  struct edge {",
					"    int to;",
					"    T c;",
					"    T f;",
					"    int rev;",
					"  };",
					"",
					"  vector<vector<edge>> g;",
					"  vector<int> ptr;",
					"  vector<int> d;",
					"  vector<int> q;",
					"  vector<int> cnt_on_layer;",
					"  vector<int> prev_edge;",
					"  bool can_reach_sink;",
					"",
					"  int n;",
					"  int st, fin;",
					"  T flow;",
					"   ",
					"  flow_graph(int _n, int _st, int _fin) : n(_n), st(_st), fin(_fin) {",
						"    assert(0 <= st && st < n && 0 <= fin && fin < n && st != fin);",
						"    g.resize(n);",
						"    ptr.resize(n);",
						"    d.resize(n);",
						"    q.resize(n);",
						"    cnt_on_layer.resize(n + 1);",
						"    prev_edge.resize(n);",
						"    flow = 0;",
						"  }",
						"",
						"  void clear_flow() {",
							"    for (int i = 0; i < n; i++) {",
								"      for (edge &e : g[i]) {",
									"        e.f = 0;",
									"      }",
									"    }",
									"    flow = 0;",
									"  }",
									"   ",
									"  void add(int from, int to, T forward_cap, T backward_cap) {",
										"    assert(0 <= from && from < n && 0 <= to && to < n);",
										"    int from_size = g[from].size();",
										"    int to_size = g[to].size();",
										"    g[from].push_back({to, forward_cap, 0, to_size});",
										"    g[to].push_back({from, backward_cap, 0, from_size});",
										"  }",
										"",
										"  bool expath() {",
											"    fill(d.begin(), d.end(), n);",
											"    q[0] = fin;",
											"    d[fin] = 0;",
											"    fill(cnt_on_layer.begin(), cnt_on_layer.end(), 0);",
											"    cnt_on_layer[n] = n - 1;",
											"    cnt_on_layer[0] = 1;",
											"    int beg = 0, end = 1;",
											"    while (beg < end) {",
												"      int i = q[beg++];",
												"      for (const edge &e : g[i]) {",
													"        const edge &back = g[e.to][e.rev];",
													"        if (back.c - back.f > eps && d[e.to] == n) {",
														"          cnt_on_layer[d[e.to]]--;",
														"          d[e.to] = d[i] + 1;",
														"          cnt_on_layer[d[e.to]]++;",
														"          q[end++] = e.to;",
														"        }",
														"      }",
														"    }",
														"    return (d[st] != n);",
														"  }",
														"",
														"  T augment(int &v) {",
															"    T cur = numeric_limits<T>::max();",
															"    int i = fin;",
															"    while (i != st) {",
																"      const edge &e = g[i][prev_edge[i]];",
																"      const edge &back = g[e.to][e.rev];",
																"      cur = min(cur, back.c - back.f);",
																"      i = e.to;",
																"    }",
																"    i = fin;",
																"    while (i != st) {",
																	"      edge &e = g[i][prev_edge[i]];",
																	"      edge &back = g[e.to][e.rev];",
																	"      back.f += cur;",
																	"      e.f -= cur;",
																	"      i = e.to;",
																	"      if (back.c - back.f <= eps) {",
																		"        v = i;",
																		"      }",
																		"    }",
																		"    return cur;",
																		"  }",
																		"",
																		"  int retreat(int v) {",
																			"    int new_dist = n - 1;",
																			"    for (const edge &e : g[v]) {",
																				"      if (e.c - e.f > eps && d[e.to] < new_dist) {",
																					"        new_dist = d[e.to];",
																					"      }",
																					"    }",
																					"    cnt_on_layer[d[v]]--;",
																					"    if (cnt_on_layer[d[v]] == 0) {",
																						"      if (new_dist + 1 > d[v]) {",
																							"        can_reach_sink = false;",
																							"      }",
																							"    }",
																							"    d[v] = new_dist + 1;",
																							"    cnt_on_layer[d[v]]++;",
																							"    if (v != st) {",
																								"      v = g[v][prev_edge[v]].to;",
																								"    }",
																								"    return v;",
																								"  }",
																								"   ",
																								"  T max_flow() {",
																									"    can_reach_sink = true;",
																									"    for (int i = 0; i < n; i++) {",
																										"      ptr[i] = (int) g[i].size() - 1;",
																										"    }",
																										"    if (expath()) {",
																											"      int v = st;",
																											"      while (d[st] < n) {",
																												"        while (ptr[v] >= 0) {",
																													"          const edge &e = g[v][ptr[v]];",
																													"          if (e.c - e.f > eps && d[e.to] == d[v] - 1) {",
																														"            prev_edge[e.to] = e.rev;",
																														"            v = e.to;",
																														"            if (v == fin) {",
																															"              flow += augment(v);",
																															"            }",
																															"            break;",
																															"          }",
																															"          ptr[v]--;",
																															"        }",
																															"        if (ptr[v] < 0) {",
																																"          ptr[v] = (int) g[v].size() - 1;",
																																"          v = retreat(v);",
																																"          if (!can_reach_sink) {",
																																	"            break;",
																																	"          }",
																																	"        }",
																																	"      }",
																																	"    }",
																																	"    return flow;",
																																	"  }",
																																	"",
																																	"  vector<bool> min_cut() {",
																																		"    max_flow();",
																																		"    assert(!expath());",
																																		"    vector<bool> ret(n);",
																																		"    for (int i = 0; i < n; i++) {",
																																			"      ret[i] = (d[i] != n);",
																																			"    }",
																																			"    return ret;",
																																			"  }",
																																			"};"
		],
		"description": "maxflow"
	}
}
