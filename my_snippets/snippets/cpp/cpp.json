{
	"GOTOHANOI": {
		"prefix": "hvmegy",
		"body": [
			"// [ нvмegy ]",
			"// OLPSIEUCUP AND ICPC 2024 GOTOHANOI",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using i64 = long long;",
			"#define int long long",
			" ",
			"#define all(c) c.begin(), c.end()",
			"#ifdef hvmegy",
			"#define dbg(...) logger(#__VA_ARGS__, __VA_ARGS__)",
			"template<typename ...Args>",
			"void logger(string vars, Args&&... values) {",
				"	cerr << \"[\" << vars << \" : \";",
					"	string delim = \"\";",
					"	(..., (cerr << delim << values, delim = \", \"));",
					"	cerr << \"]\" << '\\n'; ",
					"}",
					"#else",
					"#define dbg(...)",
					"#endif",
					" ",
					"mt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());",
					" ",
					"int GOTOHANOI();",
					"void init(); ",
					" ",
					"int32_t main()",
					"{",
						"        cin.tie(0) -> sync_with_stdio(0); ",
						"        cout << fixed << setprecision(15);",
						"	",
						"	#ifdef hvmegy",
						"	freopen(\"input.txt\", \"r\", stdin); ",
						"	freopen(\"output.txt\", \"w\", stdout); ",
						"	freopen(\"log.txt\", \"w\", stderr);",
						"	#endif",
						"",
						"",
						"",
						"	// =============================",
						"        	bool MULTITEST = ${1:0}; ",
						"	// =============================",
						"	",
						"	init(); ",
						"        int OLPSIEUCUP2024 = 1; ",
						"        if (MULTITEST) cin >> OLPSIEUCUP2024; ",
						"	for (int i = 1; i <= OLPSIEUCUP2024; i++) {",
							"		if (GOTOHANOI()) break;",
							"		#ifdef hvmegy",
							"			cout << \"--ENDTEST--\" << '\\n';",
							"			cerr << \"--ENDTEST--\" << '\\n';",
							"		#endif",
							"	}",
							"",
							"	#ifdef hvmegy",
							"		cerr << '\\n' << clock() * 1000.0 / CLOCKS_PER_SEC << \"ms\" << '\\n';",
							"	#endif",
							"",
							"        return 0;",
							"}",
							"",
							"void init() {}",
							"",
							"int GOTOHANOI() { ",
								"	${0}",
								"	",
								"	return 0; ",
								"}",
								"  "
		],
		"description": "GOTOHANOI"
	}, 
	"2-SAT Solver": {
		"prefix": "TSS",
		"body": [
			"struct TSS { ",
				"	int nvar; ",
				"	int nvrt; ",
				"	vector<vector<int>> adj;",
				"	vector<int> res, scc, topo, vis, in, low, del, idx; ",
				"",
				"	TSS(int nvar):",
				"		nvar(nvar), ",
				"		nvrt(nvar * 2), ",
				"		adj(nvrt + 1), ",
				"		res(nvar + 1), ",
				"		scc(nvrt + 1), ",
				"		in(nvrt + 1), ",
				"		low(nvrt + 1), ",
				"		del(nvrt + 1), ",
				"		idx(nvrt + 1) {}",
				"",
				"",
				"	int conj(int u) { ",
					"		if (u > nvar) return u - nvar; ",
					"		return u + nvar;",
					"	}",
					"",
					"	void add(int u, bool nu, int v, bool nv) { ",
						"		if (nu) u = conj(u); ",
						"		if (nv) v = conj(v); ",
						"		adj[conj(u)].push_back(v); ",
						"		adj[conj(v)].push_back(u); ",
						"	}",
						"	void edge(int u, bool nu, int v, bool nv) { ",
							"		if (nu) u = conj(u); ",
							"		if (nv) v = conj(v); ",
							"		adj[u].push_back(v); ",
							"	}",
							"	int curdfs = 0; ",
							"	stack<int> st; ",
							"	int curidx = nvrt; ",
							"	void tarjan(int u) { ",
								"		in[u] = low[u] = ++curdfs; ",
								"		st.push(u); ",
								"		for (int v : adj[u]) { ",
									"			if (del[v]) continue; ",
									"			if (!in[v]) { ",
										"				tarjan(v); ",
										"				low[u] = min(low[u], low[v]); ",
										"			}",
										"			else { ",
											"				low[u] = min(low[u], in[v]); ",
											"			}",
											"		}",
											"		if (low[u] == in[u]) { ",
												"			idx[u] = curidx--; ; ",
												"			while (st.top() != u) { ",
													"				int v = st.top(); ",
													"				st.pop(); ",
													"				del[v] = true; ",
													"				scc[v] = u; ",
													"			}",
													"			scc[u] = u; ",
													"			del[u] = true; ",
													"			st.pop(); ",
													"		}",
													"	}",
													"	bool solve() { ",
														"		for (int i = 1; i <= nvrt; i++) { ",
															"			if (!in[i]) tarjan(i); ",
															"		}",
															"		for (int i = 1; i <= nvar; i++) { ",
																"			if (scc[i] == scc[conj(i)]) return false; ",
																"			res[i] = idx[scc[i]] > idx[scc[conj(i)]]; ",
																"		}",
																"		return true; ",
																"	}",
																"};",
																""
		],
		"description": "2-SAT Solver"
	}
}
